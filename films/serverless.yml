service: films
frameworkVersion: '2'


plugins:
  - serverless-plugin-typescript
  - serverless-offline

provider:
  name: aws
  environment:
    STAGE: ${opt:stage, self:provider.stage, 'dev'}

  runtime: nodejs12.x
  lambdaHashingVersion: 20201221
  profile: daniel-school
  region: us-east-1
  stackName: reto-indra-${opt:stage, self:provider.stage, 'dev'}
  apiName: reto-indra-${opt:stage, self:provider.stage, 'dev'}

  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/filmsTable-${opt:stage, self:provider.stage, 'dev'}
      


functions:
  getFilms:
    handler: src/handler.init
    name: getFilms
    timeout: 30
    memorySize: 256

    events:
      - http:
          path: /films
          method: get

resources:
  Resources:
    filmsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: filmsTable-${opt:stage, self:provider.stage, 'dev'}
        AttributeDefinitions:
          - AttributeName: title
            AttributeType: S
          - AttributeName: episode_id
            AttributeType: N
        KeySchema:
          - AttributeName: title
            KeyType: HASH
          - AttributeName: episode_id
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

